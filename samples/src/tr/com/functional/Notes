It is recommended that every functional interface must contain @FunctionalInterface annotation
By marking as functional interface compiler can detect any mistake and can generate a compile error
Any interface with a SAM (Single Abstract Method) is treated as functional interface
-> Default functions are not abstract -> so a functional interface can contain additional default methods

It was introduced in Java 8

Since a primitive type canâ€™t be a generic type argument, there are versions of the Function interface for the most used
primitive types double, int, long, and their combinations in argument and return types:
IntFunction, LongFunction, DoubleFunction: arguments are of specified type, return type is parameterized
ToIntFunction, ToLongFunction, ToDoubleFunction: return type is of specified type, arguments are parameterized
DoubleToIntFunction, DoubleToLongFunction, IntToDoubleFunction, IntToLongFunction, LongToIntFunction, LongToDoubleFunction: having both argument and return type defined as primitive types, as specified by their names